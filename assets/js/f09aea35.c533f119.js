"use strict";(self.webpackChunkeik=self.webpackChunkeik||[]).push([[445],{5680:(e,r,a)=>{a.d(r,{xA:()=>c,yg:()=>d});var n=a(6540);function t(e,r,a){return r in e?Object.defineProperty(e,r,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[r]=a,e}function i(e,r){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var r=1;r<arguments.length;r++){var a=null!=arguments[r]?arguments[r]:{};r%2?i(Object(a),!0).forEach((function(r){t(e,r,a[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(a,r))}))}return e}function s(e,r){if(null==e)return{};var a,n,t=function(e,r){if(null==e)return{};var a,n,t={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||(t[a]=e[a]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],r.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var l=n.createContext({}),p=function(e){var r=n.useContext(l),a=r;return e&&(a="function"==typeof e?e(r):o(o({},r),e)),a},c=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},g=n.forwardRef((function(e,r){var a=e.components,t=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(a),g=t,d=u["".concat(l,".").concat(g)]||u[g]||m[g]||i;return a?n.createElement(d,o(o({ref:r},c),{},{components:a})):n.createElement(d,o({ref:r},c))}));function d(e,r){var a=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=a.length,o=new Array(i);o[0]=g;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[u]="string"==typeof e?e:t,o[1]=s;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},394:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var n=a(8168),t=(a(6540),a(5680));const i={id:"server_file_structure",title:"Eik server - File structure",sidebar_label:"File structure"},o=void 0,s={unversionedId:"server_file_structure",id:"server_file_structure",title:"Eik server - File structure",description:"The EIK server stores files in the following structure:",source:"@site/docs/server_file_structure.md",sourceDirName:".",slug:"/server_file_structure",permalink:"/docs/server_file_structure",draft:!1,tags:[],version:"current",frontMatter:{id:"server_file_structure",title:"Eik server - File structure",sidebar_label:"File structure"},sidebar:"mainSidebar",previous:{title:"REST API",permalink:"/docs/server_rest_api"},next:{title:"Metrics",permalink:"/docs/server_metrics"}},l={},p=[{value:"Packages",id:"packages",level:2},{value:"NPM Packages",id:"npm-packages",level:2},{value:"Import Maps",id:"import-maps",level:2},{value:"Aliases",id:"aliases",level:2}],c={toc:p},u="wrapper";function m(e){let{components:r,...a}=e;return(0,t.yg)(u,(0,n.A)({},c,a,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("p",null,"The EIK server stores files in the following structure:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-sh"},":root\n\u2514\u2500\u2500 :org\n    \u251c\u2500\u2500 map\n    \u2502\xa0\xa0 \u2514\u2500\u2500 :name\n    \u2502\xa0\xa0     \u251c\u2500\u2500 :version.import-map.json\n    \u2502\xa0\xa0     \u251c\u2500\u2500 :major.alias.json\n    \u2502       \u2514\u2500\u2500 versions.json\n    \u251c\u2500\u2500 pkg\n    \u2502   \u2514\u2500\u2500 :name\n    \u2502       \u251c\u2500\u2500 :version\n    \u2502       \u2502\xa0\xa0 \u251c\u2500\u2500 *\n    \u2502       \u251c\u2500\u2500 :version.package.json\n    \u2502       \u251c\u2500\u2500 :major.alias.json\n    \u2502       \u2514\u2500\u2500 versions.json\n    \u2514\u2500\u2500 npm\n        \u2514\u2500\u2500 :name\n            \u251c\u2500\u2500 :version\n            \u2502\xa0\xa0 \u251c\u2500\u2500 *\n            \u251c\u2500\u2500 :version.package.json\n            \u251c\u2500\u2500 :major.alias.json\n            \u2514\u2500\u2500 versions.json\n")),(0,t.yg)("p",null,"Parameters:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},":root")," is the root folder for everything."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},":org")," is the name of an organisation."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},":name")," is the name of a package."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},":version")," is the full semver version of a package."),(0,t.yg)("li",{parentName:"ul"},(0,t.yg)("inlineCode",{parentName:"li"},":major")," is the major semver version of a full semver version of a package.")),(0,t.yg)("h2",{id:"packages"},"Packages"),(0,t.yg)("p",null,"Packages are stored under ",(0,t.yg)("inlineCode",{parentName:"p"},"/:root/:org/pkg/:name/:version/")," and the structure of a package is\narbitrary and untouched during upload by the service."),(0,t.yg)("p",null,"The file structure of a package is stored in a package file at ",(0,t.yg)("inlineCode",{parentName:"p"},"/:root/:org/pkg/:name/:version.package.json"),"."),(0,t.yg)("h2",{id:"npm-packages"},"NPM Packages"),(0,t.yg)("p",null,'NPM packages are packages from the NPM registry that are then published to Eik as a "copy". Packages from\nthe NPM registry are published under this namespace to avoid name collision with other packages.'),(0,t.yg)("p",null,"NPM packages are stored under ",(0,t.yg)("inlineCode",{parentName:"p"},"/:root/:org/npm/:name/:version/")," and the structure of a package is\narbitrary and is not changed during upload by the service."),(0,t.yg)("p",null,"The file structure of an NPM package is stored in a package meta file at ",(0,t.yg)("inlineCode",{parentName:"p"},"/:root/:org/pkg/:name/:version.package.json"),"."),(0,t.yg)("h2",{id:"import-maps"},"Import Maps"),(0,t.yg)("p",null,"Import maps are stored under ",(0,t.yg)("inlineCode",{parentName:"p"},"/:root/:org/map/:name/:version.import-map.json"),". The filename of\nimport maps is strict and conforms to the version number it's given with a ",(0,t.yg)("inlineCode",{parentName:"p"},".json")," extension."),(0,t.yg)("p",null,"The filename of import maps prior to uploading to the service can be anything. The service will\nconvert the file name according to the parameters given when uploading it."),(0,t.yg)("h2",{id:"aliases"},"Aliases"),(0,t.yg)("p",null,"Packages, NPM packages and import map versions can be aliased. An alias is a semver major version of a\nfull semver version and is a way to map a major version to a given full semver version of a\npackage or import map."),(0,t.yg)("p",null,"This alias mapping is stored alongside the version of a package or import map version:"),(0,t.yg)("ul",null,(0,t.yg)("li",{parentName:"ul"},"Package alias path: ",(0,t.yg)("inlineCode",{parentName:"li"},"/:root/:org/pkg/:name/:major.alias.json")),(0,t.yg)("li",{parentName:"ul"},"NPM package alias path: ",(0,t.yg)("inlineCode",{parentName:"li"},"/:root/:org/npm/:name/:major.alias.json")),(0,t.yg)("li",{parentName:"ul"},"Import map alias path: ",(0,t.yg)("inlineCode",{parentName:"li"},"/:root/:org/map/:name/:major.alias.json"))))}m.isMDXComponent=!0}}]);